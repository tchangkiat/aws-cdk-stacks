apiVersion: v1
kind: Namespace
metadata:
  name: example
  labels:
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ts-node-express
  namespace: example
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: example
  name: ts-node-express-amd64
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ts-node-express
      kubernetes.io/arch: amd64
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ts-node-express
        kubernetes.io/arch: amd64
    spec:
      automountServiceAccountToken: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: ts-node-express
      # This topology spread constraints configuration makes Karpenter to spread the nodes across all availability zones and spread the pods across all nodes evenly
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ts-node-express
              kubernetes.io/arch: amd64
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ts-node-express
              kubernetes.io/arch: amd64
      containers:
        - name: ts-node-express
          image: [URL]
          imagePullPolicy: Always
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "1"
              memory: "1Gi"
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            timeoutSeconds: 45
            periodSeconds: 120
            failureThreshold: 3
          ports:
            - containerPort: 8000
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
      nodeSelector:
        karpenter.sh/nodepool: default
        karpenter.k8s.aws/instance-family: c6i
---
apiVersion: v1
kind: Service
metadata:
  namespace: example
  name: ts-node-express-amd64
spec:
  selector:
    app.kubernetes.io/name: ts-node-express
    kubernetes.io/arch: amd64
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: example
  name: ts-node-express-arm64
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ts-node-express
      kubernetes.io/arch: arm64
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ts-node-express
        kubernetes.io/arch: arm64
    spec:
      automountServiceAccountToken: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: ts-node-express
      # This topology spread constraints configuration makes Karpenter to spread the nodes across all availability zones and spread the pods across all nodes evenly
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ts-node-express
              kubernetes.io/arch: arm64
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ts-node-express
              kubernetes.io/arch: arm64
      containers:
        - name: ts-node-express
          image: [URL]
          imagePullPolicy: Always
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "1"
              memory: "1Gi"
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            timeoutSeconds: 45
            periodSeconds: 120
            failureThreshold: 3
          ports:
            - containerPort: 8000
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
      nodeSelector:
        karpenter.sh/nodepool: default-arm64
        karpenter.k8s.aws/instance-family: c7g
---
apiVersion: v1
kind: Service
metadata:
  namespace: example
  name: ts-node-express-arm64
spec:
  selector:
    app.kubernetes.io/name: ts-node-express
    kubernetes.io/arch: arm64
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: example
  name: ts-node-express
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: ts-node-express-canary
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/actions.canary-deployment: >-
      {
        "type": "forward",
        "forwardConfig": {
          "targetGroups": [
            {
              "serviceName": "ts-node-express-amd64",
              "servicePort": 8000,
              "weight": 90
            },
            {
              "serviceName": "ts-node-express-arm64",
              "servicePort": 8000,
              "weight": 10
            }
          ]
        }
      }
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: canary-deployment
                port:
                  name: use-annotation
